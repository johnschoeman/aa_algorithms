c
n
odd_count <= 1
odd_count
n
s
display puts hash_map.to_s
hash_map.to_s
q
self.each do |item| puts item end
puts self.to_s
c
n
res
n
s
display curr_node.key
n
display current_node
n
empty?
display key
s
key
n
s
key
c
n
key
n
self.to_s
s
n
display puts self.to_s
display self.to_s
n
res
n
key
n
s
puts self.to_s
self.to_s
key
q
n
s
display self.to_s
display key
c
@store
@map
self.to_s
s
key
node
c
display node
n
key
display curr_node.next.key
s
n
display curr_node.key
n
empty?
key
s
key
s
node.key
node
s
node
key
keuy
q
p @prc
@prc
@prc.call(0)
node.val
node.key
node
q
n
s
node
n
@store
c
q
key
@map.get(key)
@map
@store
self
c
@store[key.hash % num_buckets].include?(key)
@store[key.hash % num_buckets]
key.hash
key
c
display key
c
n
@store[key.hash % num_buckets].include?(key)
@store[key.hash % num_buckets]
@store
c
display key
key
c
key
c
key
c
key
c
@store.include?(key)
key
@store
@stoer
self.store
self
c
q
c
n
display item
item.key
item
q
cc
c
puts new_node.prev
puts new_node.next
puts new_node
p new_node
new_node
n
first
last
new_node
n
self
exit
last
@head.next
c
@head.next
@head
self.head
self
q
c
res
c
n
res
q
c
n
@head.next.key == 'tail'
@head.next.key == 'tail
@head.next.key
@head.next
@head
self.head
self
q
c
display self
q
c
cc
c
n
self
c
self
